tittle = Заголовок
profile = Профиль
desc = Описание
login1 = Вход
sing_up = Регистрация
email = Электронная почта
pass1 = Пароль
sign_in = Вход
oops = Упс!
forbidden = Недоступно!
error = Ошибка
name1 = Имя
age1 = Возраст
height1 = Рост(см)
weight1 = Вес
activity1 = Уровень активности за день
min1 = Минимум
low1 = Низкий
med = Средний
high = Высокий
max = Максимальный
sex1 = Пол
man = Мужчина
woman = Женщина
confpass = Подтвердите пароль
error4031 = Ты действительно думаешь что можешь перейти на любую страницу?
error4032 = Да, ты модешь, но перед этим просто спроси у нас
go_home = Вернуться на главную
notfound = Страница не найдена
error404 = Извините, но страница, которую вы ищете, не существует, была удалена, имя изменено или временно недоступна
error5001 = Мы запутались! Внутренняя ошибка сервера!
error5002 = Извините, произошла ошибка. Пожалуйста, попробуйте позже. Это все, что мы знаем.
healthy = Здоровый образ жизни!
caltrack = Приложение для отслеживания калорий
finproj = Финальный проект
finprojtext = Система отслеживания потери веса / питания. Клиент выбирает еду (имя, белки, жиры, углеводы), которые он съел (из уже подготовленного списка) и записал Количество. Клиент может добавить свой тип пищи (имя, калории, количество. белки, жиры, углеводы). Если клиент увеличил суточную норму, система сообщит ему об этом и запишет, на сколько Норма была превышена. Норму взять из параметров клиента (возраст, рост, вес, образ жизни и т. д.).
requirements1 = Общие требования
requirements2 = Необходимо построить веб-приложение, поддерживающую следующую функциональность:
requirements3 = 1. На основе сущностей предметной области создать классы их описывающие.
requirements4 = 2. Классы и методы должны иметь отражающую их функциональность названия и должны быть грамотно структурированы по пакетам
requirements5 = 3. Информацию о предметной области хранить в БД, для доступа использовать API JDBC с использованием пула соединений, стандартного или разработанного самостоятельно. В качестве СУБД рекомендуется MySQL.
requirements6 = 4. Приложение должно поддерживать работу с кириллицей (быть многоязычной), в том числе и при хранении информации в БД
requirements7 = 5. Код должен быть документирован.
requirements8 = 6. Приложение должно быть покрыто Юнит-тестами
requirements9 = 7. При разработке бизнес логики использовать сессии и фильтры, и события в системе обрабатывать с помощью Log4j.
requirements10 = 8. В приложении необходимо реализовать Pagination, Transaction в зависимости от Вашего проекта
requirements11 = 9. Используя сервлеты и JSP, реализовать функциональности, предложенные в постановке конкретной задачи.
requirements12 = 10. В страницах JSP применять библиотеку JSTL
requirements13 = 11. Приложение должно корректно реагировать на ошибки и исключения разного рода (Пользователь никогда не должен видеть stack-trace на стороне front-end).
requirements14 = 12. В приложении должна быть реализована система Авторизации и Аутентификации
readmore = Читать ещё
registr = Регистрация
reguser = Регистрация нового пользователя
examplename = Иван
myfood = Моя Еда
addmyfood = Добавить мой тип еды
select = Выберите свою еду за день из списка или добавьте свой собственный тип, используя кнопку «Добавить мой тип еды»
prodname = Название продукта
date1 = Дата
quantport = Количество порций(100гр)
prod = Продукт
fats = Жиры
proteins = Белки
carbohydr = Углеводы
cal = Калории
add = Добавить
limit = Превышен лимит!!!
per100gr = на 100гр
logout = Выход
go_reg = Перейти к регистрации
go_login = Перейти к логину



